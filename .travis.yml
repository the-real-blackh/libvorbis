# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/haskell-CI/haskell-ci

  - env: BUILD=cabal-cmake GHCVER=8.2.2 CABALVER=2.0
    language: haskell
    ghc: "8.2.2"
  - env: BUILD=cabal-cmake GHCVER=8.4.4 CABALVER=2.2
    language: haskell
    ghc: "8.4.4"
  - env: BUILD=cabal-cmake GHCVER=8.6.5 CABALVER=2.4
    language: haskell
    ghc: "8.6.5"

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  - env: BUILD=cabal-cmake GHCVER=head  CABALVER=head
    language: haskell
    ghc: "head"

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack-cmake ARGS="--resolver lts-11"
    language: c
    compiler: ": #stack 8.2.2"
    addons: {apt: {packages: [ghc-8.2.2], sources: [hvr-ghc]}}
  - env: BUILD=stack-cmake ARGS="--resolver lts-12"
    language: c
    compiler: ": #stack 8.4.4"
    addons: {apt: {packages: [ghc-8.4.4], sources: [hvr-ghc]}}
  - env: BUILD=stack-cmake ARGS="--resolver lts-14"
    language: c
    compiler: ": #stack 8.6.5"
    addons: {apt: {packages: [ghc-8.6.5], sources: [hvr-ghc]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack-cmake ARGS="--resolver nightly"
    language: c
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on OS X in addition to Linux
  - env: BUILD=stack ARGS="--resolver lts-11"
    language: c
    compiler: ": #stack 8.2.2 osx"
    os: osx
  - env: BUILD=stack ARGS="--resolver lts-12"
    language: c
    compiler: ": #stack 8.4.4 osx"
    os: osx
  - env: BUILD=stack ARGS="--resolver lts-14"
    language: c
    compiler: ": #stack 8.6.5 osx"
    os: osx

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    language: c
    compiler: ": #stack nightly osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-11"
    language: c
    compiler: ": #stack 8.2.2 windows"
    os: windows

  - env: BUILD=stack ARGS="--resolver lts-12"
    language: c
    compiler: ": #stack 8.4.4 windows"
    os: windows

  - env: BUILD=stack ARGS="--resolver lts-14"
    language: c
    compiler: ": #stack 8.6.5 windows"
    os: windows

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    language: c
    compiler: ": #stack nightly windows"
    os: windows

  allow_failures:
  - env: BUILD=cabal-cmake GHCVER=head  CABALVER=head
  - env: BUILD=stack-cmake ARGS="--resolver nightly"
  - env: BUILD=stack       ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:$PATH
- mkdir -p ~/.local/bin
- curl -sSL https://get.haskellstack.org/ | sh

install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  case "$BUILD" in
    stack)
      stack $ARGS init
      stack --no-terminal --install-ghc $ARGS test
      ;;
    stack-cmake)
      mkdir libogg/build
      cd libogg/build
      cmake ..
      cd ../..
      cp libogg/build/include/ogg/config_types.h libogg/include/ogg
      rm -r libogg/build
      stack $ARGS init
      stack --no-terminal --install-ghc $ARGS test
      ;;
    cabal-cmake)
      mkdir libogg/build
      cd libogg/build
      cmake ..
      cd ../..
      cp libogg/build/include/ogg/config_types.h libogg/include/ogg
      rm -r libogg/build
      cabal --version
      travis_retry cabal update
      cabal install --only-dependencies --force-reinstalls --ghc-options='-O0' --reorder-goals --max-backjumps=-1 $CABALARGS
      ;;
    *)
      exit -1
      ;;
  esac
script:
- |
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test --haddock --no-haddock-deps
      ;;
    stack-cmake)
      stack --no-terminal $ARGS test --haddock --no-haddock-deps
      ;;
    cabal-cmake)
      cabal configure --enable-tests --enable-benchmarks -v2 --ghc-options='-O0 -Werror'
      cabal build
      cabal check || [ "$CABALVER" == "1.16" ]
      cabal test
      cabal sdist
      cabal copy
      SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz && \
        (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
      ;;
    *)
      exit -1
      ;;
  esac
